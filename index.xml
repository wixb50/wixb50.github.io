<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wixb blog</title>
    <link>http://wixb50.gitcafe.io/</link>
    <description>Recent content on Wixb blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wixb50@gmail.com (Wixb)</managingEditor>
    <webMaster>wixb50@gmail.com (Wixb)</webMaster>
    <copyright>(c) 2015 wixb.All rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Dec 2015 18:10:38 +0800</lastBuildDate>
    <atom:link href="http://wixb50.gitcafe.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker集群系列之－ESXi5.5上搭建CoreOS集群-01</title>
      <link>http://wixb50.gitcafe.io/2015/12/15/docker%E9%9B%86%E7%BE%A4%E7%B3%BB%E5%88%97%E4%B9%8Besxi5.5%E4%B8%8A%E6%90%AD%E5%BB%BAcoreos%E9%9B%86%E7%BE%A4-01/</link>
      <pubDate>Tue, 15 Dec 2015 18:10:38 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/12/15/docker%E9%9B%86%E7%BE%A4%E7%B3%BB%E5%88%97%E4%B9%8Besxi5.5%E4%B8%8A%E6%90%AD%E5%BB%BAcoreos%E9%9B%86%E7%BE%A4-01/</guid>
      <description>

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#null-link&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#前置条件&#34;&gt;前置条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装coreos虚拟机&#34;&gt;安装CoreOS虚拟机&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#choosing-a-channel&#34;&gt;Choosing a Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploying-with-vmware-vsphere-client-55&#34;&gt;Deploying with VMware vSphere Client 5.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloud-config&#34;&gt;Cloud-Config&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#需要说明的discovery&#34;&gt;需要说明的&lt;code&gt;discovery&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logging-in&#34;&gt;Logging in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-new-machines&#34;&gt;Adding New Machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#一些有用的coreos命令&#34;&gt;一些有用的CoreOS命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#参考资料&#34;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /MarkdownTOC --&gt;

&lt;h2 id=&#34;前言-null-link&#34;&gt;&lt;a href=&#34;chrome://not-a-link&#34;&gt;前言&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;因为大多数环境都是适配于大公司的云平台，但是也是有折中办法的。CoreOS是一个基于Linux 内核的轻量级操作系统，为了计算机集群的基础设施建设而生，专注于自动化，轻松部署，安全，可靠，规模化。作为一个操作系统，CoreOS 提供了在应用容器内部署应用所需要的基础功能环境以及一系列用于服务发现和配置共享的内建工具。而ESXi专为运行虚拟机、最大限度降低配置要求和简化部署而设计。所以我觉得使用ESXi当作IaaS架构，运行CoreOS集群，这样是可行的。话不多少，开始把。&lt;/p&gt;

&lt;h2 id=&#34;前置条件&#34;&gt;前置条件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;安装ESXi机器一台：怎么装自己应该知道把，如果因为驱动原因还需要自己定制安装ISO，见Google。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装coreos虚拟机&#34;&gt;安装CoreOS虚拟机&lt;/h2&gt;

&lt;h3 id=&#34;choosing-a-channel&#34;&gt;Choosing a Channel&lt;/h3&gt;

&lt;p&gt;CoreOS is released into alpha, beta, and stable channels. Releases to each channel serve as a release-candidate for the next channel. For example, a bug-free alpha release is promoted bit-for-bit to the beta channel.&lt;/p&gt;

&lt;p&gt;The channel is selected based on the URLs below. Simply replace &lt;code&gt;stable&lt;/code&gt; with &lt;code&gt;alpha&lt;/code&gt; or &lt;code&gt;beta&lt;/code&gt; in the URL. Select 1 of these to download the appropriate image. Read the release notes for specific features and bug fixes in each channel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -LO http://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;curl -LO http://beta.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;curl -LO http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploying-with-vmware-vsphere-client-5-5&#34;&gt;Deploying with VMware vSphere Client 5.5&lt;/h3&gt;

&lt;p&gt;Use the vSphere Client to deploy the VM as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;in the menu, click “File &amp;gt; Deploy OVF Template…”&lt;/li&gt;
&lt;li&gt;in the wizard, specify the location of the OVA downloaded earlier&lt;/li&gt;
&lt;li&gt;name your VM&lt;/li&gt;
&lt;li&gt;choose “thin provision” for the disk format if you want the disk to grow dynamically&lt;/li&gt;
&lt;li&gt;choose your network settings&lt;/li&gt;
&lt;li&gt;confirm the settings then click “Finish”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;NOTE: Unselect “Power on after deployment” so you have a chance to edit VM settings before powering it up for the first time.&lt;/p&gt;

&lt;p&gt;The last step uploads the files to your ESXi datastore and registers your VM. You can now tweak the VM settings, like memory and virtual cores. These instructions were tested to deploy to an ESXi 5.1 host.&lt;/p&gt;

&lt;p&gt;Before powering it on, you will have to create a cloud-config.&lt;/p&gt;

&lt;h2 id=&#34;cloud-config&#34;&gt;Cloud-Config&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://coreos.com/os/docs/latest/cloud-config.html&#34;&gt;Cloud-Config&lt;/a&gt;是CoreOS内比较重要的概念，可以理解为一种配置CoreOS的方式：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Providing Cloud-Config with Config-Drive&lt;/strong&gt;&lt;br /&gt;
Cloud-config can be specified by via &lt;a href=&#34;https://github.com/coreos/coreos-cloudinit/blob/master/Documentation/config-drive.md&#34;&gt;config-drive&lt;/a&gt; with the filesystem label &lt;code&gt;config-2&lt;/code&gt;. This is commonly done through whatever interface allows for attaching CD-ROMs or new drives.&lt;/p&gt;

&lt;p&gt;First create a user_data file using the the &lt;a href=&#34;https://coreos.com/os/docs/latest/cloud-config.html&#34;&gt;cloud-config guide&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config
hostname: core-01  #替换成你的命名的主机名
write_files:
    - path: /etc/systemd/network/static.network
      permissions: 0644  #文件权限,无需改
      content: |
        [Match]
        Name=ens192  #网卡名称,如果你的是别的名称,请改回来

        [Network]
        Address=192.1.1.150/24  #网络配置,同时把下面的IP改掉
        Gateway=192.1.1.1
        DNS=10.11.248.114
        DNS=8.8.4.4
coreos:
    etcd2:
        # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
        discovery: https://discovery.etcd.io/&amp;lt;token&amp;gt;  #这里在后面详细讲
        # multi-region and multi-cloud deployments need to use 192.1.1.150
        advertise-client-urls: http://192.1.1.150:2379
        initial-advertise-peer-urls: http://192.1.1.150:2380
        # listen on both the official ports and the legacy ports
        # legacy ports can be omitted if your application doesn&#39;t depend on them
        listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
        listen-peer-urls: http://192.1.1.150:2380,http://192.1.1.150:7001
    fleet:
        public-ip: 192.1.1.150
        metadata: region=europe #metadata,可自定义
    flannel:
        etcd_prefix: /coreos.com/network2
    locksmith:
        endpoint: 192.1.1.150:4001
    update:
        reboot-strategy: etcd-lock
        group: stable
    units:
        - name: etcd2.service #注意是etcd2,第二版哟
          command: start
        - name: fleet.service
          command: start
users:
  - name: &amp;quot;core&amp;quot;  #改成你的用户名,可不是core
    groups:
      - &amp;quot;sudo&amp;quot;
      - &amp;quot;docker&amp;quot;
    ssh-authorized-keys:   
      - ssh-rsa 替换成你的公钥... 
manage_etc_hosts: localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cloud-Config配置信息验证地址&lt;a href=&#34;https://coreos.com/validate/&#34;&gt;https://coreos.com/validate/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;需要说明的-discovery&#34;&gt;需要说明的&lt;code&gt;discovery&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;　　因为要搭建集群，需要用到服务发现，配置集群的服务发现有两种方式：一种是Static方式，第二种就是Discovery方式了。其中个人不推荐第一种方式，因为每加入一台主机就需要手动配置etcd节点，非常不方便。&lt;br /&gt;
　　第二种Discovery方式是使用远程的服务器辅助服务发现，只需要配置好Discovery的URl就可以自动把新加入的服务器加入集群。其中iscovery服务器可以使用官网提供的，也可以自己搭建(我还没搭建过，这里不介绍了)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://discovery.etcd.io/new?size=3  #控制台或者浏览器执行即可,推荐使用size=1,见下面说明
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中有一个&lt;code&gt;size&lt;/code&gt;参数，讲一下我遇到的问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;没有使用size参数结果老是启动不了;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;使用了&lt;code&gt;size=3&lt;/code&gt;，结果启动主节点，主节点的etcd2就一直等待从节点加入，结果等我去加入它的时候，已经超时了;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;size=1&lt;/code&gt;，没有什么要等待了，过一会就自动启动成功了&lt;code&gt;fleetctl list-machines&lt;/code&gt;也能正常显示。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，我可能不知道网上哪些一下子启动3个节点是怎么做到的，还是有待学习。但是这里我也有自己的解决方法，就是使用&lt;code&gt;size=1&lt;/code&gt;先运行出来一个只有一台主机的集群，果然可以运行。然后使用主节点的&lt;code&gt;&amp;lt;Token&amp;gt;&lt;/code&gt;再去构建其他节点的&lt;code&gt;Cloud-config&lt;/code&gt;，然后运行，结果果然它自己就能加入到第一个节点里面。&lt;/p&gt;

&lt;p&gt;这里我可能投机取巧了点，但是能运行，也能达到效果就行，哈哈，希望不会有什么bug。&lt;/p&gt;

&lt;p&gt;Finally, to create a cloud-config ISO, use the following commands using the user_data file we just created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#wrap up a config named user_data in a config drive image:
mkdir -p /tmp/new-drive/openstack/latest
cp user_data /tmp/new-drive/openstack/latest/user_data
mkisofs -R -V config-2 -o configdrive-01.iso /tmp/new-drive
rm -r /tmp/new-drive

#transform iso file to datastore
#scp configdrive-01.iso root@192.1.1.132:/vmfs/volumes/datastore1/ISO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the config-drive standard was originally an OpenStack feature, which is why you’ll see strings containing openstack. This filepath needs to be retained, although CoreOS supports config-drive on all platforms.&lt;/p&gt;

&lt;p&gt;Note: The $private_ipv4 and $public_ipv4 substitution variables referenced in other documents are not supported on VMware. You can replace all these variables by the (static) IP of the CoreOS server you’re setting up. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: https://discovery.etcd.io/&amp;lt;token&amp;gt;
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$public_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn&#39;t depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: https://discovery.etcd.io/&amp;lt;token&amp;gt;
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://192.168.0.100:2379
    initial-advertise-peer-urls: http://192.168.0.100:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn&#39;t depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://192.168.0.100:2380,http://192.168.0.100:7001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach the ISO to the VM as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;edit the settings of the CoreOS VM&lt;/li&gt;
&lt;li&gt;in the dialog, select “CD/DVD drive 1” in the device list&lt;/li&gt;
&lt;li&gt;select “connect at power on”&lt;/li&gt;
&lt;li&gt;choose “datastore ISO file” as the device type&lt;/li&gt;
&lt;li&gt;browse the datastore and select your config drive ISO&lt;/li&gt;
&lt;li&gt;confirm the changes and click “OK”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;NOTE:如果发现ip不对，可查看配置文件，Maybe重启一下也可以解决哟。&lt;/p&gt;

&lt;h2 id=&#34;logging-in&#34;&gt;Logging in&lt;/h2&gt;

&lt;p&gt;可以查看ESXi控制台CoreOS的IP，但是静态的自己已经知道了。&lt;/p&gt;

&lt;p&gt;Now you can login using your SSH key or password set in your cloud-config，可以登录就没必要折腾下步了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh core@192.1.1.150
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, if the cloud-config fails to apply you can append coreos.autologin to the kernel parameters on boot, the console won’t prompt for a password. This is handy for debugging.&lt;/p&gt;

&lt;p&gt;When GNU GRUB appears at boot, make sure CoreOS default is selected and press e, then add coreos.autologin after &lt;code&gt;$linux_append&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Before&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.holysh1t.net/vgwtest/coreosstuff/grubautologin1.png&#34; alt=&#34;之前的启动界面&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.holysh1t.net/vgwtest/coreosstuff/grubautologin2.png&#34; alt=&#34;之前的启动界面&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;When coreos.autologin is added, press &lt;code&gt;CTRL+X&lt;/code&gt; to boot CoreOS with these parameters. Note that the next time autologin will be disabled again as these kernel parameters aren’t persistent.&lt;/p&gt;

&lt;p&gt;You can now manually apply the cloud-config by using the following command in the console of CoreOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /usr/bin/coreos-cloudinit --from-file /media/configdrive/openstack/latest/user_data
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-new-machines&#34;&gt;Adding New Machines&lt;/h2&gt;

&lt;p&gt;按照前面所说的，如果需要把其他CoreOS加入集群，只需要把Discovery URL改成原来集群地址即可自动加入了，是不是很方便呀。&lt;/p&gt;

&lt;p&gt;If you forgot which discovery URL you used, you may look it up on one of the members of the cluster. Use the following grep command on one of your existing machines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep DISCOVERY /run/systemd/system/etcd2.service.d/20-cloudinit.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see a line the contains the original discovery URL, like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Environment=&amp;quot;ETCD_DISCOVERY=https://discovery.etcd.io/575302f03f4fb2db82e81ea2abca55e9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Your basic CoreOS cluster is set up, and now you can move on to testing with it!&lt;/p&gt;

&lt;h2 id=&#34;一些有用的coreos命令&#34;&gt;一些有用的CoreOS命令&lt;/h2&gt;

&lt;p&gt;查看当前集群所有machines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fleetctl list-machines
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看服务运行状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl -l status etcd2  #其中-l参数可选
systemctl -l status fleet
systemctl -l status docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看服务的运行日志&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;journalctl -u etcd2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/cloud/library/1505_gutb_coreos/&#34;&gt;在 ESXi5 上部署 CoreOS 集群解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tuicool.com/m/articles/zyaAbyJ&#34;&gt;平台云基石-CoreOS之集群篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stable.release.core-os.net/&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.holysh1t.net/vgwtest/coreosstuff/coreos-vmware-esxi-setup.html&#34;&gt;Running CoreOS on VMware ESXi 5.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>快速搭建CoreOS集群</title>
      <link>http://wixb50.gitcafe.io/2015/12/12/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAcoreos%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Sat, 12 Dec 2015 15:38:38 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/12/12/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAcoreos%E9%9B%86%E7%BE%A4/</guid>
      <description>

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#前言&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#准备工作&#34;&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#配置工作&#34;&gt;配置工作&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装-vagrant-and-virtualbox&#34;&gt;安装 Vagrant and VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#从coreos官方代码库获取基本配置，并进行修改&#34;&gt;从CoreOS官方代码库获取基本配置，并进行修改&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#启动集群&#34;&gt;启动集群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#测试集群&#34;&gt;测试集群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /MarkdownTOC --&gt;

&lt;h2 id=&#34;前言-null&#34;&gt;&lt;a href=&#34;null&#34;&gt;前言&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;第一次接触CoreOS这样的分布式平台，运行一个集群看起来好像一个很复杂的任务，这里我们给你展示在本地快速搭建一个CoreOS集群环境是多么的容易。&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;本地的机器上已经安装了最新版本的Virtualbox, Vagrant 和 git。&lt;/p&gt;

&lt;h2 id=&#34;配置工作&#34;&gt;配置工作&lt;/h2&gt;

&lt;h3 id=&#34;安装-vagrant-and-virtualbox&#34;&gt;安装 Vagrant and VirtualBox&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;vagrant&lt;/a&gt; 和 &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;virtualbox&lt;/a&gt;都是直接下载双击安装的，具体安装教程看官网。&lt;/p&gt;

&lt;h3 id=&#34;从coreos官方代码库获取基本配置-并进行修改&#34;&gt;从CoreOS官方代码库获取基本配置，并进行修改&lt;/h3&gt;

&lt;p&gt;首先，获取模板配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/coreos/coreos-vagrant
cd coreos-vagrant
cp user-data.sample user-data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取新的token&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://discovery.etcd.io/new
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用新的token配置到user-data文件如下，&lt;a href=&#34;https://coreos.com/os/docs/latest/booting-on-vagrant.html&#34;&gt;官网示例&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    # specify the initial size of your cluster with ?size=X
    # WARNING: replace each time you &#39;vagrant destroy&#39;
    discovery: https://discovery.etcd.io/&amp;lt;token&amp;gt;
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn&#39;t depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    public-ip: $public_ipv4
  flannel:
    interface: $public_ipv4
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: flanneld.service
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config &#39;{ &amp;quot;Network&amp;quot;: &amp;quot;10.1.0.0/16&amp;quot; }&#39;
      # Uncomment line above if you want to use flannel in your installation.
      # command: start
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;提示：编辑完毕后，请到[&lt;a href=&#34;http://codebeautify.org/yaml-validator][]校验下yaml文件格式是否正确。&#34;&gt;http://codebeautify.org/yaml-validator][]校验下yaml文件格式是否正确。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;启动集群&#34;&gt;启动集群&lt;/h2&gt;

&lt;p&gt;默认情况下，CoreOS Vagrantfile 将会启动单机。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们需要复制并修改config.rb.sample文件.&lt;/p&gt;

&lt;p&gt;复制文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp config.rb.sample config.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 config.rb 文件，配置 $num_instances 和 $update_channel 这两个参数。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Official CoreOS channel from which updates should be downloade
$num_instances=3  ## 表示我们要创建3台主机
# Official CoreOS channel from which updates should be downloade
$update_channel=&#39;stable&#39;  ## 表示使用的coreos版本，有：&#39;stable&#39;、&#39;beta&#39;、&#39;alpha&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;提示：如果国内下载比较慢，可以先事先下载好&lt;code&gt;coreos_production_vagrant.box&lt;/code&gt;，添加到vagrant的box里面。注意更改名字为&amp;raquo;coreos-stable|coreos-beta|coreos-alpha&amp;raquo;，和你上面填写的对应。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;启动集群&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;添加ssh的公匙&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-add ~/.vagrant.d/insecure_private_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;连接集群中的第一台机器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh core-01 -- -A
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;测试集群&#34;&gt;测试集群&lt;/h2&gt;

&lt;p&gt;使用fleet来查看机器运行状况&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fleetctl list-machines
=&amp;gt;
MACHINE   IP            METADATA
517d1c7d... 172.17.8.101  -
cb35b356... 172.17.8.103  -
17040743... 172.17.8.102  -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上类似的信息，恭喜，本地基于三台机器的集群已经成功启动，可能需要等个几秒才会完全启动。&lt;/p&gt;

&lt;p&gt;那么之后你就可以基于CoreOS的三大工具做任务分发，分布式存储等很多功能了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Batch Operation</title>
      <link>http://wixb50.gitcafe.io/2015/12/11/docker-batch-operation/</link>
      <pubDate>Fri, 11 Dec 2015 18:38:38 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/12/11/docker-batch-operation/</guid>
      <description>

&lt;p&gt;批量操作docker images or container commander.&lt;/p&gt;

&lt;h4 id=&#34;remove-all-stopped-containers&#34;&gt;Remove all stopped containers.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;remove-all-containers&#34;&gt;Remove all containers.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;remove-all-untagged-images&#34;&gt;Remove all untagged images&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rmi $(docker images | grep &amp;quot;^&amp;lt;none&amp;gt;&amp;quot; | awk &amp;quot;{print $3}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;remove-all-images&#34;&gt;Remove all images&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;docker rmi $(docker images | grep \ | awk &#39;{print $3}&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu更改源设置</title>
      <link>http://wixb50.gitcafe.io/2015/12/08/ubuntu%E6%9B%B4%E6%94%B9%E6%BA%90%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Tue, 08 Dec 2015 16:43:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/12/08/ubuntu%E6%9B%B4%E6%94%B9%E6%BA%90%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;首先备份源列表：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;而后用vim或其他编辑器打开:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从下面列表中选择合适的源，替换掉文件中所有的内容，保存编辑好的文件:&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;注意：一定要选对版本&lt;/font&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后，刷新列表&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;附上ubuntu14.04源：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;网易163源：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搜狐源：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://mirrors.sohu.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ trusty-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oschina源：
&lt;code&gt;
deb http://mirrors.oschina.net/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.oschina.net/ubuntu/ trusty-backports main restricted universe multiverse
deb http://mirrors.oschina.net/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.oschina.net/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.oschina.net/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.oschina.net/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.oschina.net/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.oschina.net/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.oschina.net/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.oschina.net/ubuntu/ trusty-updates main restricted universe multiverse
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu搭建远程桌面服务器</title>
      <link>http://wixb50.gitcafe.io/2015/12/06/ubuntu%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sun, 06 Dec 2015 17:27:25 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/12/06/ubuntu%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;1、安装xrdp和vnc4server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install xrdp
sudo apt-get install vnc4server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tightvncserver在ubuntu14.04下面是不用装的，如果连接的是ubuntu12.04的话。是需要安装的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install tightvncserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、安装xfce4的桌面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install xubuntu-desktop
echo &amp;quot;xfce4-session&amp;quot; &amp;gt;~/.xsession  #在需要远程登录的用户下执行一遍即可
sudo service xrdp restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果无法远程连接成功，记得在终端下执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新启动系统。&lt;/p&gt;

&lt;p&gt;Windows下的操作：&lt;br /&gt;
使用&amp;raquo;窗口键+R&amp;raquo;打开&amp;raquo;运行对话框&amp;raquo;&amp;ndash;&amp;gt;输入&amp;raquo;mstsc&amp;raquo;&amp;ndash;&amp;gt;回车&amp;ndash;&amp;gt;输入Ubuntu主机的IP地址&amp;ndash;&amp;gt;&amp;laquo;连接&amp;raquo;。在Ubuntu下可以通过“ifconfig”获得本机网络连接的概况，其中包括IP地址。
填上正确的IP地址，按回车，会出现一个登陆框，我们选择“sesman-Xvnc”这个，然后输入你的Ubuntu的用户名和密码，OK！&lt;/p&gt;

&lt;p&gt;后记：使用这种方法连上Ubuntu还有个问题，就是键盘的快捷键会有点小混乱。此时断开远程桌面，在Ubuntu的实体机器上，打开管理键盘快捷键，将带有“windows”键，ubunntu显示是“mod5”键（好像是类似的，记不清了）的快捷键组合删掉即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nodejs linux安装与卸载</title>
      <link>http://wixb50.gitcafe.io/2015/12/06/nodejs-linux%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</link>
      <pubDate>Sun, 06 Dec 2015 12:51:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/12/06/nodejs-linux%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</guid>
      <description>

&lt;h2 id=&#34;node-js-安装-卸载-升级&#34;&gt;Node.js 安装、卸载、升级&lt;/h2&gt;

&lt;h3 id=&#34;安装-源码下载&#34;&gt;安装、源码下载&lt;/h3&gt;

&lt;p&gt;下载最新版本node的源代码：&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压下载文件：&lt;br /&gt;
&lt;code&gt;tar -xzvf node-v4.2.1.tar.gz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;切换工作目录至源代码目录：&lt;br /&gt;
&lt;code&gt;cd node-v4.2.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configure&lt;/code&gt;配置安装文件：&lt;br /&gt;
&lt;code&gt;./configure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;make编译码代码：  &lt;em&gt;(编译Node源码时间较长，我编译用了大约40分左右。)&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;make install安装：&lt;br /&gt;
&lt;code&gt;sudo make install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看安装：&lt;em&gt;(显示版本号)&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;node -v&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;卸载&#34;&gt;卸载&lt;/h3&gt;

&lt;p&gt;保留编译完成的源码包，或者自己再重新编译生成个&lt;/p&gt;

&lt;p&gt;干掉make install命令时装进去的文件,需要管理员身份&lt;br /&gt;
&lt;code&gt;sudo make uninstall&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;只删除make时产生的临时文件：&lt;br /&gt;
&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;同时删除configure和make产生的临时文件&lt;br /&gt;
&lt;code&gt;make distclean&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;升级node版本&#34;&gt;升级Node版本&lt;/h3&gt;

&lt;p&gt;直接下载源码重新编译，安装。（覆盖了旧的版本）&lt;/p&gt;

&lt;h2 id=&#34;ps&#34;&gt;Ps&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;也同样适用与其他linux平台编译安装软件。&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang使用http client发起get和post请求</title>
      <link>http://wixb50.gitcafe.io/2015/11/23/golang%E4%BD%BF%E7%94%A8http-client%E5%8F%91%E8%B5%B7get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Mon, 23 Nov 2015 22:00:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/23/golang%E4%BD%BF%E7%94%A8http-client%E5%8F%91%E8%B5%B7get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/</guid>
      <description>

&lt;p&gt;需要导入的包&lt;code&gt;&amp;quot;io/ioutil&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;net/http&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;get请求&#34;&gt;get请求&lt;/h3&gt;

&lt;p&gt;get请求可以直接http.Get方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func httpGet() {
    resp, err := http.Get(&amp;quot;http://www.01happy.com/demo/accept.php?id=1&amp;quot;)
    if err != nil {
        // handle error
    }

    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;post请求&#34;&gt;post请求&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;使用http.Post方式&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func httpPost() {
    resp, err := http.Post(&amp;quot;http://www.01happy.com/demo/accept.php&amp;quot;,
        &amp;quot;application/x-www-form-urlencoded&amp;quot;,
        strings.NewReader(&amp;quot;name=cjb&amp;quot;))
    if err != nil {
        fmt.Println(err)
    }

    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tips：使用这个方法的话，第二个参数要设置成”application/x-www-form-urlencoded”，否则post参数无法传递。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;使用http.PostForm方法&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func httpPostForm() {
    resp, err := http.PostForm(&amp;quot;http://www.01happy.com/demo/accept.php&amp;quot;,
        url.Values{&amp;quot;key&amp;quot;: {&amp;quot;Value&amp;quot;}, &amp;quot;id&amp;quot;: {&amp;quot;123&amp;quot;}})

    if err != nil {
        // handle error
    }

    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }

    fmt.Println(string(body))

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;复杂的请求&#34;&gt;复杂的请求&lt;/h3&gt;

&lt;p&gt;有时需要在请求的时候设置头参数、cookie之类的数据，就可以使用http.Do方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func httpDo() {
    client := &amp;amp;http.Client{}

    req, err := http.NewRequest(&amp;quot;POST&amp;quot;, &amp;quot;http://www.01happy.com/demo/accept.php&amp;quot;, strings.NewReader(&amp;quot;name=cjb&amp;quot;))
    if err != nil {
        // handle error
    }

    req.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;)
    req.Header.Set(&amp;quot;Cookie&amp;quot;, &amp;quot;name=anny&amp;quot;)

    resp, err := client.Do(req)

    defer resp.Body.Close()

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }

    fmt.Println(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同上面的post请求，必须要设定Content-Type为application/x-www-form-urlencoded，post参数才可正常传递.&lt;/p&gt;

&lt;h3 id=&#34;head请求&#34;&gt;Head请求&lt;/h3&gt;

&lt;p&gt;发起head请求可以直接使用http client的head方法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang资料</title>
      <link>http://wixb50.gitcafe.io/2015/11/22/golang%E8%B5%84%E6%96%99/</link>
      <pubDate>Sun, 22 Nov 2015 22:00:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/22/golang%E8%B5%84%E6%96%99/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;WindowsCrossCompiling:&lt;a href=&#34;https://github.com/golang/go/wiki/WindowsCrossCompiling&#34;&gt;Building windows go programs on linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mysql 安装配置</title>
      <link>http://wixb50.gitcafe.io/2015/11/20/mysql-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 20 Nov 2015 19:32:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/20/mysql-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;1.更新源&lt;br /&gt;
&lt;code&gt;source /etc/apt/source.list&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;br /&gt;
2.在Ubuntu14.04下安装mysql：(还是从mysql官网下载安装包安装吧)&lt;br /&gt;
&lt;code&gt;sudo apt-get install mysql-server&lt;/code&gt;&lt;br /&gt;
3.在目录/etc/mysql下打开my.cnf，用vim编辑，找到&lt;br /&gt;
&lt;code&gt;bind-address   =127.0.0.1&lt;/code&gt;&lt;br /&gt;
改为：&lt;br /&gt;
&lt;code&gt;bind-address   =0.0.0.0&lt;/code&gt;或者直接将上句注释掉&lt;br /&gt;
4.使用root账户登录到Mysql数据库：&lt;br /&gt;
&lt;code&gt;mysql -u root -p&lt;/code&gt;&lt;br /&gt;
使用命令：&lt;br /&gt;
&lt;code&gt;use mysql;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;select host, user, password from user&lt;/code&gt;可以查看到当前可以连接到该服务器的用户&lt;br /&gt;
在mysql&amp;gt;输入：&lt;br /&gt;
&lt;code&gt;grant all on *.* to root@&#39;%&#39; identified by &#39;123&#39;&lt;/code&gt;&lt;br /&gt;
注：&lt;br /&gt;
* root是用户名
* passwd是连接密码&lt;br /&gt;
&lt;code&gt;flush privileges;&lt;/code&gt;  # 刷新权限表&lt;br /&gt;
5.最后在远端可以进行远程登录：&lt;br /&gt;
* 用户名：root
* 密码：123
* 端口：3306&lt;br /&gt;
完成！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gulp 资源教程集合</title>
      <link>http://wixb50.gitcafe.io/2015/11/20/gulp-%E8%B5%84%E6%BA%90%E6%95%99%E7%A8%8B%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 20 Nov 2015 18:51:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/20/gulp-%E8%B5%84%E6%BA%90%E6%95%99%E7%A8%8B%E9%9B%86%E5%90%88/</guid>
      <description>

&lt;h1 id=&#34;gulp-资源教程集合&#34;&gt;gulp 资源教程集合&lt;/h1&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;1.&lt;a href=&#34;http://www.w3ctech.com/topic/134&#34;&gt;Gulp开发教程（翻译）&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&#34;http://gulpjs.com/plugins/&#34;&gt;Gulp插件搜索地址&lt;/a&gt;&lt;br /&gt;
3.&lt;a href=&#34;http://www.gulpjs.com.cn/&#34;&gt;gulp中文网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;####项目例子&lt;br /&gt;
- &lt;a href=&#34;https://github.com/Swiip/generator-gulp-angular&#34;&gt;generator-gulp-angular&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://github.com/yeoman/generator-angular#app&#34;&gt;generator-angular&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang排序实现 sort接口实现</title>
      <link>http://wixb50.gitcafe.io/2015/11/20/golang%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0-sort%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 20 Nov 2015 18:32:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/20/golang%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0-sort%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;sort.Interface接口有三个方法,给自己的struct实现这三个方法,然后用将自己的结构体传给sort.Sort方法就排序完成.&lt;/p&gt;

&lt;p&gt;sort包也有几个常用的方法sort.Float64Slice sort.IntSlise sort.StringSlise&lt;/p&gt;

&lt;p&gt;源码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sort&amp;quot;
)

type MapSorter []Item

type Item struct {
    Key string
    Val int64
}

func NewMapSorter(m map[string]int64) MapSorter {
    ms := make(MapSorter, 0, len(m))

    for k, v := range m {
        ms = append(ms, Item{k, v})
    }

    return ms
}

func (ms MapSorter) Len() int {
    return len(ms)
}

func (ms MapSorter) Less(i, j int) bool {
    return ms[i].Val &amp;lt; ms[j].Val // 按值排序
    //return ms[i].Key &amp;lt; ms[j].Key // 按键排序
}

func (ms MapSorter) Swap(i, j int) {
    ms[i], ms[j] = ms[j], ms[i]
}

func main(){
    m  := map[string]int64 {
        &amp;quot;e&amp;quot;: 10,
        &amp;quot;a&amp;quot;: 2,
        &amp;quot;d&amp;quot;: 15,
        &amp;quot;c&amp;quot;: 8,
        &amp;quot;f&amp;quot;: 1,
        &amp;quot;b&amp;quot;: 12,
    }

    ms := NewMapSorter(m)
    sort.Sort(ms)

    for _, item := range ms {
        fmt.Printf(&amp;quot;%s:%d\n&amp;quot;, item.Key, item.Val)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>http安全</title>
      <link>http://wixb50.gitcafe.io/2015/11/19/http%E5%AE%89%E5%85%A8/</link>
      <pubDate>Thu, 19 Nov 2015 15:12:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/19/http%E5%AE%89%E5%85%A8/</guid>
      <description>

&lt;h2 id=&#34;https&#34;&gt;https&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000&#34;&gt;给Nginx配置一个自签名的SSL证书&lt;/a&gt; 2014.12.18&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ttt.tt/9/&#34;&gt;Apache + WordPress + SSL 完全指南&lt;/a&gt; 2012.07.14&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jjonline.cn/linux/92.html&#34;&gt;https安全链接的配置教程&lt;/a&gt; 2012.12.01&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>http知识点</title>
      <link>http://wixb50.gitcafe.io/2015/11/19/http%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Thu, 19 Nov 2015 11:35:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/19/http%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>

&lt;h2 id=&#34;http网络知识收集&#34;&gt;http网络知识收集&lt;/h2&gt;

&lt;p&gt;content&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考资料&#34;&gt;参考资料&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/2ecd288d27ad&#34;&gt;http知识点总结&lt;/a&gt; 2015.10.24&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/0a47fc776314&#34;&gt;http持久连接&lt;/a&gt; 2014.05.03&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linux178.com/web/httprequest.html/comment-page-1&#34;&gt;一次完整的HTTP事务&lt;/a&gt; January 11, 2014&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tshare365.com/archives/1295.html&#34;&gt;tcpdump、wireshark、tshark的简单介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>git travis-ci</title>
      <link>http://wixb50.gitcafe.io/2015/11/16/git-travis-ci/</link>
      <pubDate>Mon, 16 Nov 2015 13:25:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/16/git-travis-ci/</guid>
      <description>&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kankanews.com/ICkengine/archives/134261.shtml&#34;&gt;持续集成服务托管Travis CI入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mysql数据字典生成工具</title>
      <link>http://wixb50.gitcafe.io/2015/11/13/mysql%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 13 Nov 2015 21:35:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/13/mysql%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</guid>
      <description>

&lt;h2 id=&#34;mysql数据词典生成器&#34;&gt;mysql数据词典生成器&lt;/h2&gt;

&lt;p&gt;一个php的在线词典生成器，便于将数据库导出成表格，一般论文里面可能有需要哦。&lt;/p&gt;

&lt;p&gt;下载地址 &lt;a href=&#34;http://vdisk.weibo.com/s/yThjZrryTIxQl&#34;&gt;http://vdisk.weibo.com/s/yThjZrryTIxQl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;效果图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.funboxpower.com/wp-content/uploads/2015/04/QQ%E6%88%AA%E5%9B%BE20150401141354.png&#34; alt=&#34;result&#34; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果不能下载的话，附上源码：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * 生成mysql数据字典
 */
header(&amp;quot;Content-type: text/html; charset=utf-8&amp;quot;);
//配置数据库
$dbserver   = &amp;quot;127.0.0.1&amp;quot;;
$dbusername = &amp;quot;root&amp;quot;;
$dbpassword = &amp;quot;root&amp;quot;;
$database   = &amp;quot;wsx&amp;quot;;

//其他配置
$mysql_conn = @mysql_connect(&amp;quot;$dbserver&amp;quot;, &amp;quot;$dbusername&amp;quot;, &amp;quot;$dbpassword&amp;quot;) or die(&amp;quot;Mysql connect is error.&amp;quot;);
mysql_select_db($database, $mysql_conn);
mysql_query(&#39;SET NAMES utf8&#39;, $mysql_conn);
$table_result = mysql_query(&#39;show tables&#39;, $mysql_conn);

$no_show_table = array();    //不需要显示的表
$no_show_field = array();   //不需要显示的字段

//取得所有的表名
while($row = mysql_fetch_array($table_result)){
    if(!in_array($row[0],$no_show_table)){
        $tables[][&#39;TABLE_NAME&#39;] = $row[0];
    }
}
//替换所以表的表前缀
if(@$_GET[&#39;prefix&#39;]){
    $prefix = &#39;czzj&#39;;
    foreach($tables as $key =&amp;gt; $val){
        $tableName = $val[&#39;TABLE_NAME&#39;];
        $string = explode(&#39;_&#39;,$tableName);
        if($string[0] != $prefix){  
            $string[0] = $prefix;  
            $newTableName = implode(&#39;_&#39;, $string);  
            mysql_query(&#39;rename table &#39;.$tableName.&#39; TO &#39;.$newTableName);  
        }
    }
    echo &amp;quot;替换成功！&amp;quot;;exit();
}

//循环取得所有表的备注及表中列消息
foreach ($tables as $k=&amp;gt;$v) {
    $sql  = &#39;SELECT * FROM &#39;;
    $sql .= &#39;INFORMATION_SCHEMA.TABLES &#39;;
    $sql .= &#39;WHERE &#39;;
    $sql .= &amp;quot;table_name = &#39;{$v[&#39;TABLE_NAME&#39;]}&#39;  AND table_schema = &#39;{$database}&#39;&amp;quot;;
    $table_result = mysql_query($sql, $mysql_conn);
    while ($t = mysql_fetch_array($table_result) ) {
        $tables[$k][&#39;TABLE_COMMENT&#39;] = $t[&#39;TABLE_COMMENT&#39;];
    }

    $sql  = &#39;SELECT * FROM &#39;;
    $sql .= &#39;INFORMATION_SCHEMA.COLUMNS &#39;;
    $sql .= &#39;WHERE &#39;;
    $sql .= &amp;quot;table_name = &#39;{$v[&#39;TABLE_NAME&#39;]}&#39; AND table_schema = &#39;{$database}&#39;&amp;quot;;

    $fields = array();
    $field_result = mysql_query($sql, $mysql_conn);
    while ($t = mysql_fetch_array($field_result) ) {
        $fields[] = $t;
    }
    $tables[$k][&#39;COLUMN&#39;] = $fields;
}
mysql_close($mysql_conn);


$html = &#39;&#39;;
//循环所有表
foreach ($tables as $k=&amp;gt;$v) {
    $html .= &#39;  &amp;lt;h3&amp;gt;&#39; . ($k + 1) . &#39;、&#39; . $v[&#39;TABLE_COMMENT&#39;] .&#39;  （&#39;. $v[&#39;TABLE_NAME&#39;]. &#39;）&amp;lt;/h3&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;  &amp;lt;table border=&amp;quot;1&amp;quot; cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot; width=&amp;quot;100%&amp;quot;&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;      &amp;lt;tbody&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;          &amp;lt;tr&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;              &amp;lt;th&amp;gt;字段名&amp;lt;/th&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;              &amp;lt;th&amp;gt;数据类型&amp;lt;/th&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;              &amp;lt;th&amp;gt;默认值&amp;lt;/th&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;              &amp;lt;th&amp;gt;允许非空&amp;lt;/th&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;              &amp;lt;th&amp;gt;自动递增&amp;lt;/th&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;              &amp;lt;th&amp;gt;备注&amp;lt;/th&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;          &amp;lt;/tr&amp;gt;&#39;.&amp;quot;\n&amp;quot;;

    foreach ($v[&#39;COLUMN&#39;] as $f) {
        if(@!is_array($no_show_field[$v[&#39;TABLE_NAME&#39;]])){
            $no_show_field[$v[&#39;TABLE_NAME&#39;]] = array();
        }
        if(!in_array($f[&#39;COLUMN_NAME&#39;],$no_show_field[$v[&#39;TABLE_NAME&#39;]])){
            $html .= &#39;          &amp;lt;tr&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;              &amp;lt;td class=&amp;quot;c1&amp;quot;&amp;gt;&#39; . $f[&#39;COLUMN_NAME&#39;] . &#39;&amp;lt;/td&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;              &amp;lt;td class=&amp;quot;c2&amp;quot;&amp;gt;&#39; . $f[&#39;COLUMN_TYPE&#39;] . &#39;&amp;lt;/td&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;              &amp;lt;td class=&amp;quot;c3&amp;quot;&amp;gt;&#39; . $f[&#39;COLUMN_DEFAULT&#39;] . &#39;&amp;lt;/td&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;              &amp;lt;td class=&amp;quot;c4&amp;quot;&amp;gt;&#39; . $f[&#39;IS_NULLABLE&#39;] . &#39;&amp;lt;/td&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;              &amp;lt;td class=&amp;quot;c5&amp;quot;&amp;gt;&#39; . ($f[&#39;EXTRA&#39;]==&#39;auto_increment&#39;?&#39;是&#39;:&#39;&amp;amp;nbsp;&#39;) . &#39;&amp;lt;/td&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;              &amp;lt;td class=&amp;quot;c6&amp;quot;&amp;gt;&#39; . $f[&#39;COLUMN_COMMENT&#39;] . &#39;&amp;lt;/td&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
            $html .= &#39;          &amp;lt;/tr&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
        }
    }
    $html .= &#39;      &amp;lt;/tbody&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
    $html .= &#39;  &amp;lt;/table&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
}
?&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;WIXB数据库数据字典生成代码&amp;lt;/title&amp;gt;
&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;ThinkDb V1.0&amp;quot; /&amp;gt;
&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;WIXB数据库数据字典生成代码&amp;quot; /&amp;gt;
&amp;lt;meta name=&amp;quot;copyright&amp;quot; content=&amp;quot;2008-2014 Tensent Inc.&amp;quot; /&amp;gt;
&amp;lt;style&amp;gt;
body, td, th { font-family: &amp;quot;微软雅黑&amp;quot;; font-size: 14px; }
.warp{margin:auto; width:900px;}
.warp h3{margin:0px; padding:0px; line-height:30px; margin-top:10px;}
table { border-collapse: collapse; border: 1px solid #CCC; background: #efefef; }
table th { text-align: left; font-weight: bold; height: 26px; line-height: 26px; font-size: 14px; text-align:center; border: 1px solid #CCC; padding:5px;}
table td { height: 20px; font-size: 14px; border: 1px solid #CCC; background-color: #fff; padding:5px;}
.c1 { width: 120px; }
.c2 { width: 120px; }
.c3 { width: 150px; }
.c4 { width: 80px; text-align:center;}
.c5 { width: 80px; text-align:center;}
.c6 { width: 270px; }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;warp&amp;quot;&amp;gt;
    &amp;lt;h1 style=&amp;quot;text-align:center;&amp;quot;&amp;gt;WIXB数据库数据字典生成代码&amp;lt;/h1&amp;gt;
&amp;lt;?php echo $html; ?&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
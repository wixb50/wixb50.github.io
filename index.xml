<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wixb blog</title>
    <link>http://wixb50.gitcafe.io/</link>
    <description>Recent content on Wixb blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wixb50@gmail.com (Wixb)</managingEditor>
    <webMaster>wixb50@gmail.com (Wixb)</webMaster>
    <copyright>(c) 2015 wixb.All rights reserved.</copyright>
    <lastBuildDate>Sat, 07 Nov 2015 22:07:33 +0800</lastBuildDate>
    <atom:link href="http://wixb50.gitcafe.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ubuntu常用命令集合</title>
      <link>http://wixb50.gitcafe.io/2015/11/07/ubuntu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</link>
      <pubDate>Sat, 07 Nov 2015 22:07:33 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/07/ubuntu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</guid>
      <description>

&lt;h3 id=&#34;关机-重启命令&#34;&gt;关机、重启命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;shutdown –help  #可以查看shutdown命令如何使用，当然也可以使用man shutdown命令。
shutdown -h now #现在立即关机
shutdown -r now #现在立即重启
shutdown -r +3 #三分钟后重启
shutdown -h +3 “The System will shutdown after 3 minutes” #提示使用者将在三分钟后关机
shutdown -r 20:23 #在20：23时将重启计算机
shutdown -r 20:23 &amp;amp; #可以将在20：23时重启的任务放到后台去，用户可以继续操作终端
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu网络配置</title>
      <link>http://wixb50.gitcafe.io/2015/11/07/ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 07 Nov 2015 20:39:30 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/07/ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;h3 id=&#34;ubuntu配置网络静态ip&#34;&gt;Ubuntu配置网络静态IP&lt;/h3&gt;

&lt;p&gt;Ubuntu网络配置文件是在/etc/network/interfaces&lt;br /&gt;
&amp;gt;默认文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
# The loopback network interface
auto lo
iface lo inet loopback
# The primary network interface
auto eth0
iface eth0 inet dhcp
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;如果我们想要配置静态IP可以这样：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
# The loopback network interface
auto lo
#iface lo inet loopback
# The primary network interface        #此行注释掉
auto eth0
iface eth0 inet static                 #将&amp;quot;dhcp&amp;quot;修改为&amp;quot;static&amp;quot;
address 10.0.0.125                     #增加下面三行
gateway 10.0.0.2
netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;配置DNS，在/etc/resolv.conf文件中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 10.0.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启服务器。&lt;/p&gt;

&lt;h3 id=&#34;ubuntu-14-04-重启后dns配置丢失问题的解决方案&#34;&gt;Ubuntu 14.04 重启后DNS配置丢失问题的解决方案&lt;/h3&gt;

&lt;p&gt;每次修改DNS配置文件 /etc/resolv.conf 重启后就会失效。从网上查知，这个文件是动态创建，所以每次重启都会被重写。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;更改方式有以下两种如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/network/interfaces
dns-nameservers 8.8.8.8 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/resolvconf/resolv.conf.d/base
nameserver 8.8.8.8
nameserver 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存，然后执行：&lt;code&gt;resolvconf -u&lt;/code&gt;。&lt;br /&gt;
重启之后，/etc/resolv.conf里面的内容被加载成了base中的数据。&lt;br /&gt;
所以到此为止成功解决了重启后DNS配置丢失的问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown简明语法教程</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 05 Nov 2015 13:35:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/</guid>
      <description>

&lt;h1 id=&#34;markdown简明语法教程&#34;&gt;Markdown简明语法教程&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本教程基于Markdown语言编写，项目地址位于&lt;a href=&#34;https://github.com/Melo618/Simple-Markdown-Guide&#34;&gt;Simple-Markdown-Guide&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;本教程定位为基础教程，更加详细的用法可参考其他资料。&lt;/li&gt;
&lt;li&gt;本教程中代码块内的代码为Markdown的语法。&lt;/li&gt;
&lt;li&gt;本教程中部分语法使用的是&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub Flavored Markdown&lt;/a&gt;，GFM语法与标准语法在不同环境中存在解析差异，本教程在使用时会加以说明。&lt;/li&gt;
&lt;li&gt;推荐使用Haroopad(Win)、MarkdownPad(Win)和Mou(OS X)编辑器，部分编辑器中文效果欠佳，可通过自定义CSS字体解决。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本&#34;&gt;基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Markdown是一种用来写作的轻量级标记语言。&lt;/li&gt;
&lt;li&gt;用标记语法，来代替常见的排版格式。&lt;/li&gt;
&lt;li&gt;兼容 HTML代码。&lt;/li&gt;
&lt;li&gt;特殊字符自动转换，例如&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;amp;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;字体&#34;&gt;字体&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用星号&lt;code&gt;*&lt;/code&gt;和底号&lt;code&gt;_&lt;/code&gt;表示&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;标签。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  *斜体*
  _斜体_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用双星号&lt;code&gt;**&lt;/code&gt;和双底号&lt;code&gt;__&lt;/code&gt;表示&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;标签。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  **强调**
  __强调__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;强调&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;换行&#34;&gt;换行&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;单一段落用空白行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;标题&#34;&gt;标题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;生成&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;-&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;标签，是通过在文字前面加上同等个数&lt;code&gt;#&lt;/code&gt;符号来实现。&lt;/li&gt;
&lt;li&gt;出于美观，也可以使用对称的闭合式标题符号。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ### 这是标题
  ### 这是标题 ###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;### 这是标题&lt;/p&gt;

&lt;h2 id=&#34;列表&#34;&gt;列表&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;，&lt;code&gt;-&lt;/code&gt;，&lt;code&gt;+&lt;/code&gt;这三个符号效果都一样，这3个符号被称为Markdown列表符号。而有序列表则使用数字接着一个英文句点（数字大小并不会影响输出序列）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  * 第一行
  * 第二行
  * 第三行
  6. 第四行
  5. 第五行
  4. 第六行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;li&gt;第三行&lt;/li&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;li&gt;第三行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;符号表示引用，可简写于第一行，也可以每一行都添加。&lt;/li&gt;
&lt;li&gt;区块的引用可以嵌套，只需要在层次数上加上同等数量的&lt;code&gt;&amp;gt;&lt;/code&gt;符号。&lt;/li&gt;
&lt;li&gt;引用内可以使用其他Markdown语法，包括标题、列表、代码区块等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;gt;    引用
  &amp;gt;    &amp;gt;    引用中的引用
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;引用
   &amp;gt;    引用中的引用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;代码区块&#34;&gt;代码区块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;`&lt;/code&gt;是表示inline代码，4个&lt;code&gt; &lt;/code&gt;（空格）来表示缩进式代码段，分别对应HTML的&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;标签。也可以使用&lt;code&gt;```&lt;/code&gt;来表达围栏式代码块（&lt;strong&gt;GFM语法&lt;/strong&gt;，部分编辑器不支持），并指定他的语言类型，实现语法高亮。围栏式代码块可以大量减少缩进的使用，大规模的代码块使用非常方便。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  `sort()` 函数按升序对给定数组的值排序。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;普通的缩进式代码块。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;?php
          $my_array = array(&#39;a&#39; =&amp;gt; &#39;Dog&#39;, &#39;b&#39; =&amp;gt; &#39;Cat&#39;);
          sort($my_array);
          print_r($my_array);
      ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;带语法高亮的围栏式代码块（&lt;strong&gt;GFM语法&lt;/strong&gt;，部分编辑器不支持）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ```php
  &amp;lt;?php
      $my_array = array(&#39;a&#39; =&amp;gt; &#39;Dog&#39;, &#39;b&#39; =&amp;gt; &#39;Cat&#39;);
      sort($my_array);
      print_r($my_array);
  ?&amp;gt;
  ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sort()&lt;/code&gt; 函数按升序对给定数组的值排序。&lt;/p&gt;

&lt;p&gt;普通的缩进式代码块。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;?php
      $my_array = array(&#39;a&#39; =&amp;gt; &#39;Dog&#39;, &#39;b&#39; =&amp;gt; &#39;Cat&#39;);
      sort($my_array);
      print_r($my_array);
  ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;带语法高亮的围栏式代码块（&lt;strong&gt;GFM语法&lt;/strong&gt;，部分编辑器不支持）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;  &amp;lt;?php
      $my_array = array(&#39;a&#39; =&amp;gt; &#39;Dog&#39;, &#39;b&#39; =&amp;gt; &#39;Cat&#39;);
      sort($my_array);
      print_r($my_array);
  ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Markdown支持两种形式的链接语法：行内式和参考式两种形式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;行内式链接，是在方括号后面接圆括号即可。
  例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [Melo618](http://melo618.com &amp;quot;Melo618的博客&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://melo618.com&#34; title=&#34;Melo618的博客&#34;&gt;Melo618&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考式链接，是在链接文字的括号后面加上另一个方括号，在第二个方括号里面要填入用以辨识链接的标记。
  例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [Melo618][blog]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://melo618.com&#34; title=&#34;Melo618的博客&#34;&gt;Melo618&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;图片&#34;&gt;图片&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Markdown使用一种和链接很相似的语法来标记图片，只是多了一个&lt;code&gt;!&lt;/code&gt;在最前面，同样也允许两种样式：行内式和参考式。&lt;/li&gt;
&lt;li&gt;目前为止，Markdown还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;标签。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;行内式链接，是在方括号后面接圆括号即可。
  例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ![微信](http://7sbovo.com1.z0.glb.clouddn.com/simple-markdown-guide-weixin.png &amp;quot;微信&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7sbovo.com1.z0.glb.clouddn.com/simple-markdown-guide-weixin.png&#34; alt=&#34;微信&#34; title=&#34;微信&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;参考式链接，是在链接文字的括号后面加上另一个方括号，在第二个方括号里面要填入用以辨识链接的标记。
  例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ![微信][QR]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7sbovo.com1.z0.glb.clouddn.com/simple-markdown-guide-weixin.png&#34; alt=&#34;微信&#34; title=&#34;微信&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;分隔线&#34;&gt;分隔线&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用三个以上的&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;来建立一个分隔线，行内不能有其他字符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  * * *
  ***
  - - -
  ---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;上文&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下文&lt;/p&gt;

&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Markdown使用&lt;code&gt;|&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;来绘制表格，&lt;code&gt;:&lt;/code&gt;可控制左对齐、右对齐及居中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  | Title   | Description                        |
  | :------ | :--------------------------------: |
  | Version | 0.0.1                              |
  | Editor  | [Melo618](mailto:Editor@Email.com) |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;| Title   | Description                        |
  | :&amp;mdash;&amp;mdash; | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;: |
  | Version | 0.0.1                              |
  | Editor  | &lt;a href=&#34;mailto:Editor@Email.com&#34;&gt;Melo618&lt;/a&gt; |&lt;/p&gt;

&lt;h2 id=&#34;特殊符号&#34;&gt;特殊符号&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Markdown利用&lt;code&gt;\&lt;/code&gt;字符来转义一些在语法中有特殊意义的符号。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/index.html&#34;&gt;Markdown语法说明（简体中文版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;Markdown Syntax Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown&#34;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright © 2014-2015, Melo Chan. &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitlab搭建教程</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/gitlab%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 05 Nov 2015 13:26:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/gitlab%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</guid>
      <description>

&lt;h2 id=&#34;gitlab搭建教程&#34;&gt;gitlab搭建教程&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;测试搭建环境:ubuntu14.04/trustry&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;参考教程&lt;br /&gt;
&amp;gt; 1.&lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;官方教程&lt;/a&gt;&lt;br /&gt;
&amp;gt; 2.&lt;a href=&#34;http://www.cnblogs.com/restran/p/4063880.html&#34;&gt;在自己的服务器上部署 GitLab 社区版&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins教程-简单ssh构建</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/jenkins%E6%95%99%E7%A8%8B-%E7%AE%80%E5%8D%95ssh%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Thu, 05 Nov 2015 13:26:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/jenkins%E6%95%99%E7%A8%8B-%E7%AE%80%E5%8D%95ssh%E6%9E%84%E5%BB%BA/</guid>
      <description>

&lt;h1 id=&#34;jenkins教程之-简单远程执行ssh构建&#34;&gt;Jenkins教程之——简单远程执行ssh构建&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Jenkins CI is the leading open-source continuous integration server.&lt;/p&gt;

&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;此教程中jenkins只充当于一个中间件的作用，并且所有的构建和部署都在&lt;strong&gt;远端服务器&lt;/strong&gt;完成。&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jenkins安装&#34;&gt;jenkins安装&lt;/h3&gt;

&lt;p&gt;这个自行google去，教程很简单，只要把war包下载执行即可，本文是基于dokcer的jenkins镜像安装的。&lt;/p&gt;

&lt;h3 id=&#34;gitlab安装&#34;&gt;gitlab安装&lt;/h3&gt;

&lt;p&gt;见&lt;a href=&#34;https://gitlab.com/&#34;&gt;gitlab官网&lt;/a&gt;，或者可以直接使用gitlab托管源码。&lt;/p&gt;

&lt;h2 id=&#34;jenkins配置&#34;&gt;jenkins配置&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;1.配置安全设置：&lt;code&gt;系统管理-&amp;gt;Configure Global Security&lt;/code&gt;中启用安全，然后根据自己需要，可配置用户权限等。&lt;/p&gt;

&lt;p&gt;2.插件安装：&lt;code&gt;系统管理-&amp;gt;管理插件&lt;/code&gt;中安装可选插件，本教程中需要的插件有：GIT client plugin、GIT plugin、Gitlab Hook Plugin、&lt;strong&gt;Publish Over SSH&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;3.新建一个&lt;code&gt;构建一个自由风格的软件项目&lt;/code&gt;，输入名称(不要带大写)。&lt;/p&gt;

&lt;p&gt;4.然后在&lt;code&gt;源码管理&lt;/code&gt;地方选择&lt;code&gt;Git&lt;/code&gt;输入&lt;code&gt;Repository URL&lt;/code&gt;，以及配置好&lt;code&gt;Credentials&lt;/code&gt;(可选择username或者ssh配置)，完成后选择要构建的分支&lt;code&gt;e.g.,*/develop&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;构建触发器&lt;/strong&gt;选择&lt;code&gt;触发远程构建&lt;/code&gt;，并根据提示填好身份令牌，&lt;strong&gt;并且在&lt;/strong&gt;你的&lt;code&gt;gitlab项目&lt;/code&gt;中设置好&lt;code&gt;web hook(e.g.,JENKINS_URL/job/zeu_frontend/build?token=TOKEN_NAME)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;构建&lt;/strong&gt;&lt;code&gt;增加构建步骤&lt;/code&gt;选择&lt;code&gt;send files or execute commands over ssh&lt;/code&gt;，然后配置好组要在远端执行脚本的ssh server测试能连接上，然后在&lt;code&gt;Exec command&lt;/code&gt;中输入脚本，或者&lt;code&gt;Transfer Set Source files&lt;/code&gt;可以执行jenkins中的脚本在远端执行，这里简单起见，就直接输入命令。&lt;/p&gt;

&lt;p&gt;7.这样就差不多了，还有想加的步骤，自己加把，提交一下，是不是自己开始构建了呢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;输入的脚本要自己在远端跑一下，能完整跑通才行，注意为远程服务器git配置号user和name，以及sshKey，这样就不要输入密码pull了。&lt;/p&gt;

&lt;h2 id=&#34;auth&#34;&gt;Auth&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Support by &lt;a href=&#34;http://elegencetse.com&#34;&gt;elegancetse&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git常用命令集合</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 05 Nov 2015 13:25:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</guid>
      <description>&lt;pre&gt;&lt;code&gt;git init                                                  # 初始化本地git仓库（创建新仓库）
git config --global user.name &amp;quot;xxx&amp;quot;                       # 配置用户名
git config --global user.email &amp;quot;xxx@xxx.com&amp;quot;              # 配置邮件
git config --global color.ui true                         # git status等命令自动着色
git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
git config --global --unset http.proxy                    # remove  proxy configuration on git
git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库
git status                                                # 查看当前版本状态（是否修改）
git add xyz                                               # 添加xyz文件至index
git add .                                                 # 增加当前子目录下所有更改过的文件至index
git commit -m &#39;xxx&#39;                                       # 提交
git commit --amend -m &#39;xxx&#39;                               # 合并上一次提交（用于反复修改）
git commit -am &#39;xxx&#39;                                      # 将add和commit合为一步
git rm xxx                                                # 删除index中的文件
git rm -r *                                               # 递归删除
git log                                                   # 显示提交日志
git log -1                                                # 显示1行日志 -n为n行
git log -5
git log --stat                                            # 显示提交日志及相关变动文件
git log -p -m
git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容
git show dfb02                                            # 可只用commitid的前几位
git show HEAD                                             # 显示HEAD提交日志
git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
git tag                                                   # 显示已存在的tag
git tag -a v2.0 -m &#39;xxx&#39;                                  # 增加v2.0的tag
git show v2.0                                             # 显示v2.0的日志及详细内容
git log v2.0                                              # 显示v2.0的日志
git diff                                                  # 显示所有未添加至index的变更
git diff --cached                                         # 显示所有已添加index但还未commit的变更
git diff HEAD^                                            # 比较与上一个版本的差异
git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异
git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的
git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容
git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）
git branch                                                # 显示本地分支
git branch --contains 50089                               # 显示包含提交50089的分支
git branch -a                                             # 显示所有分支
git branch -r                                             # 显示所有原创分支
git branch --merged                                       # 显示所有已合并到当前分支的分支
git branch --no-merged                                    # 显示所有未合并到当前分支的分支
git branch -m master master_copy                          # 本地分支改名
git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出
git checkout -b master master_copy                        # 上面的完整版
git checkout features/performance                         # 检出已存在的features/performance分支
git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支
git checkout v2.0                                         # 检出版本v2.0
git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出
git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）
git merge origin/master                                   # 合并远程master分支至当前分支
git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改
git push origin master                                    # 将当前分支push到远程master分支
git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支
git push --tags                                           # 把所有tag推送到远程仓库
git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）
git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支
git pull origin master                                    # 获取远程分支master并merge到当前分支
git mv README README2                                     # 重命名文件README为README2
git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）
git rebase
git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）
git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933
git ls-files                                              # 列出git index包含的文件
git show-branch                                           # 图示当前分支历史
git show-branch --all                                     # 图示所有分支历史
git whatchanged                                           # 显示提交历史对应的文件修改
git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
git ls-tree HEAD                                          # 内部命令：显示某个git对象
git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH
git reflog                                                # 显示所有提交，包括孤立节点
git show HEAD@{5}
git show master@{yesterday}                               # 显示master分支昨天的状态
git log --pretty=format:&#39;%h %s&#39; --graph                   # 图示提交日志
git show HEAD~3
git show -s --pretty=raw 2be7fcb476
git stash                                                 # 暂存当前修改，将所有至为HEAD状态
git stash list                                            # 查看所有暂存
git stash show -p stash@{0}                               # 参考第一次暂存
git stash apply stash@{0}                                 # 应用第一次暂存
git grep &amp;quot;delete from&amp;quot;                                    # 文件中搜索文本“delete from”
git grep -e &#39;#define&#39; --and -e SORT_DIRENT
git gc
git fsck
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>restful架构设计</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/restful%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 05 Nov 2015 13:21:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/restful%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;三、资源（Resources）&lt;/p&gt;

&lt;p&gt;REST的名称&amp;raquo;表现层状态转化&amp;raquo;中，省略了主语。&amp;raquo;表现层&amp;raquo;其实指的是&amp;raquo;资源&amp;raquo;（Resources）的&amp;raquo;表现层&amp;raquo;。
所谓&amp;raquo;资源&amp;raquo;，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。
所谓&amp;raquo;上网&amp;raquo;，就是与互联网上一系列的&amp;raquo;资源&amp;raquo;互动，调用它的URI。&lt;br /&gt;
四、表现层（Representation）&lt;/p&gt;

&lt;p&gt;&amp;laquo;资源&amp;raquo;是一种信息实体，它可以有多种外在表现形式。我们把&amp;raquo;资源&amp;raquo;具体呈现出来的形式，叫做它的&amp;raquo;表现层&amp;raquo;（Representation）。
比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。
URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的&amp;raquo;.html&amp;raquo;后缀名是不必要的，因为这个后缀名表示格式，属于&amp;raquo;表现层&amp;raquo;范畴，而URI应该只代表&amp;raquo;资源&amp;raquo;的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对&amp;raquo;表现层&amp;raquo;的描述。&lt;br /&gt;
五、状态转化（State Transfer）&lt;/p&gt;

&lt;p&gt;访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。
互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生&amp;raquo;状态转化&amp;raquo;（State Transfer）。而这种转化是建立在表现层之上的，所以就是&amp;raquo;表现层状态转化&amp;raquo;。
客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>etcd安装</title>
      <link>http://wixb50.gitcafe.io/2015/11/03/etcd%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 03 Nov 2015 16:38:38 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/03/etcd%E5%AE%89%E8%A3%85/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;etcd 基于 Go 语言实现，因此，用户可以从 项目主页 下载源代码自行编译，也可以下载编译好的二进制文件，甚至直接使用制作好的 Docker 镜像文件来体验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;二进制文件方式下载&#34;&gt;二进制文件方式下载&lt;/h3&gt;

&lt;p&gt;编译好的二进制文件都在 github.com/coreos/etcd/releases 页面，用户可以选择需要的版本，或通过下载工具下载。&lt;/p&gt;

&lt;p&gt;例如，下面的命令使用 curl 工具下载压缩包，并解压。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L  https://github.com/coreos/etcd/releases/download/v2.0.0-rc.1/etcd-v2.0.0-rc.1-linux-amd64.tar.gz -o etcd-v2.0.0-rc.1-linux-amd64.tar.gz
tar xzvf etcd-v2.0.0-rc.1-linux-amd64.tar.gz
cd etcd-v2.0.0-rc.1-linux-amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解压后，可以看到文件包括&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls
etcd  etcdctl  etcd-migrate  README-etcdctl.md  README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 etcd 是服务主文件，etcdctl 是提供给用户的命令客户端，etcd-migrate 负责进行迁移。&lt;/p&gt;

&lt;p&gt;推荐通过下面的命令将三个文件都放到系统可执行目录 /usr/local/bin/ 或 /usr/bin/。&lt;br /&gt;
&lt;code&gt;$ sudo cp etcd* /usr/local/bin/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行 etcd，将默认组建一个两个节点的集群。数据库服务端默认监听在 2379 和 4001 端口，etcd 实例监听在 2380 和 7001 端口。显示类似如下的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./etcd
2014/12/31 14:52:09 no data-dir provided, using default data-dir ./default.etcd
2014/12/31 14:52:09 etcd: listening for peers on http://localhost:2380
2014/12/31 14:52:09 etcd: listening for peers on http://localhost:7001
2014/12/31 14:52:09 etcd: listening for client requests on http://localhost:2379
2014/12/31 14:52:09 etcd: listening for client requests on http://localhost:4001
2014/12/31 14:52:09 etcdserver: name = default
2014/12/31 14:52:09 etcdserver: data dir = default.etcd
2014/12/31 14:52:09 etcdserver: snapshot count = 10000
2014/12/31 14:52:09 etcdserver: advertise client URLs = http://localhost:2379,http://localhost:4001
2014/12/31 14:52:09 etcdserver: initial advertise peer URLs = http://localhost:2380,http://localhost:7001
2014/12/31 14:52:09 etcdserver: initial cluster = default=http://localhost:2380,default=http://localhost:7001
2014/12/31 14:52:10 etcdserver: start member ce2a822cea30bfca in cluster 7e27652122e8b2ae
2014/12/31 14:52:10 raft: ce2a822cea30bfca became follower at term 0
2014/12/31 14:52:10 raft: newRaft ce2a822cea30bfca [peers: [], term: 0, commit: 0, lastindex: 0, lastterm: 0]
2014/12/31 14:52:10 raft: ce2a822cea30bfca became follower at term 1
2014/12/31 14:52:10 etcdserver: added local member ce2a822cea30bfca [http://localhost:2380 http://localhost:7001] to cluster 7e27652122e8b2ae
2014/12/31 14:52:11 raft: ce2a822cea30bfca is starting a new election at term 1
2014/12/31 14:52:11 raft: ce2a822cea30bfca became candidate at term 2
2014/12/31 14:52:11 raft: ce2a822cea30bfca received vote from ce2a822cea30bfca at term 2
2014/12/31 14:52:11 raft: ce2a822cea30bfca became leader at term 2
2014/12/31 14:52:11 raft.node: ce2a822cea30bfca elected leader ce2a822cea30bfca at term 2
2014/12/31 14:52:11 etcdserver: published {Name:default ClientURLs:[http://localhost:2379 http://localhost:4001]} to cluster 7e27652122e8b2ae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时，可以使用 etcdctl 命令进行测试，设置和获取键值 testkey: &amp;laquo;hello world&amp;raquo;，检查 etcd 服务是否启动成功：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./etcdctl set testkey &amp;quot;hello world&amp;quot;
hello world
$ ./etcdctl get testkey
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明 etcd 服务已经成功启动了。&lt;/p&gt;

&lt;p&gt;当然，也可以通过 HTTP 访问本地 2379 或 4001 端口的方式来进行操作，例如查看 testkey 的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L http://localhost:4001/v2/keys/testkey
{&amp;quot;action&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;node&amp;quot;:{&amp;quot;key&amp;quot;:&amp;quot;/testkey&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;hello world&amp;quot;,&amp;quot;modifiedIndex&amp;quot;:3,&amp;quot;createdIndex&amp;quot;:3}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;docker-镜像方式下载&#34;&gt;Docker 镜像方式下载&lt;/h3&gt;

&lt;p&gt;镜像名称为 quay.io/coreos/etcd:v2.0.0_rc.1，可以通过下面的命令启动 etcd 服务监听到 4001 端口。&lt;br /&gt;
&lt;code&gt;$ sudo docker run -p 4001:4001 -v /etc/ssl/certs/:/etc/ssl/certs/ quay.io/coreos/etcd:v2.0.0_rc.1&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu系统变量配置</title>
      <link>http://wixb50.gitcafe.io/2015/11/03/ubuntu%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 03 Nov 2015 13:40:25 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/03/ubuntu%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;pre&gt;&lt;code&gt;Ubuntu Linux系统环境变量配置文件：   
/etc/profile : 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。 

/etc /environment : 在登录时操作系统使用的第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。 

~/.profile :  在登录时用到的第三个文件 是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。 

/etc/bashrc : 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取. 

~/.bashrc : 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。 



PASH环境变量的设置方法： 

方法一：用户主目录下的.profile或.bashrc文件（推荐） 

登录到你的用户（非root），在终端输入： 
$ sudo gedit ~/.profile(or .bashrc) 
可以在此文件末尾加入PATH的设置如下： 
export PATH=”$PATH:your path1:your path2 ...” 
保存文件，注销再登录，变量生效。 
该方式添加的变量只对当前用户有效。 

方法二：系统目录下的profile文件（谨慎） 

在系统的etc目录下，有一个profile文件，编辑该文件： 
$ sudo gedit /etc/profile 
在最后加入PATH的设置如下： 
export PATH=”$PATH:your path1:your path2 ...” 
该文件编辑保存后，重启系统，变量生效。 
该方式添加的变量对所有的用户都有效。 

方法三：系统目录下的 environment 文件（谨慎） 

在系统的etc目录下，有一个environment文件，编辑该文件： 
$ sudo gedit /etc/environment 
找到以下的 PATH 变量： 
PATH=&amp;quot;&amp;lt;......&amp;gt;&amp;quot; 
修改该 PATH 变量，在其中加入自己的path即可，例如： 
PATH=&amp;quot;&amp;lt;......&amp;gt;:your path1:your path2 …&amp;quot; 
各个path之间用冒号分割。该文件也是重启生效，影响所有用户。 
注意这里不是添加export PATH=… 。 

方法四：直接在终端下输入 

$ sudo export PATH=&amp;quot;$PATH:your path1:your path2 …&amp;quot; 
这种方式变量立即生效，但用户注销或系统重启后设置变成无效，适合临时变量的设置。 


注 意：方法二和三的修改需要谨慎，尤其是通过root用户修改，如果修改错误，将可能导致一些严重的系统错误。因此笔者推荐使用第一种方法。另外嵌入式 Linux的开发最好不要在root下进行（除非你对Linux已经非常熟悉了！！），以免因为操作不当导致系统严重错误。 

下面是一个对environment文件错误修改导致的问题以及解决方法示例： 

问题：因为不小心在 etc/environment里设在环境变量导致无法登录 
提示：不要在 etc/environment里设置 export PATH这样会导致重启后登录不了系统 
解决方法： 
在登录界面 alt +ctrl+f1进入命令模式，如果不是root用户需要键入（root用户就不许这么罗嗦，gedit编辑会不可显示） 
/usr/bin/sudo /usr/bin/vi /etc/environment 
光标移到export PATH** 行，连续按 d两次删除该行； 
输入:wq保存退出； 
然后键入/sbin/reboot重启系统（可能会提示need to boot，此时直接power off）
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant建立快照</title>
      <link>http://wixb50.gitcafe.io/2015/11/03/vagrant%E5%BB%BA%E7%AB%8B%E5%BF%AB%E7%85%A7/</link>
      <pubDate>Tue, 03 Nov 2015 12:45:55 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/03/vagrant%E5%BB%BA%E7%AB%8B%E5%BF%AB%E7%85%A7/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用Vagrant的快照功能可以很方便快速的创建当前虚拟机的一个临时备份状态，在进行重要操作时可以先创建一个快照以便在操作失误后快速恢复。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安装Vagrant快照插件：&lt;br /&gt;
&lt;code&gt;vagrant plugin install vagrant-multiprovider-snap&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant snap
Usage: vagrant snap &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Available subcommands:
     back
     delete
     go
     list
     take

For help on any individual command run `vagrant snapshot &amp;lt;command&amp;gt; -h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建一个快照&lt;br /&gt;
&lt;code&gt;vagrant snapshot take &amp;quot;Name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看快照列表&lt;br /&gt;
&lt;code&gt;vagrant snapshot list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从指定快照中恢复&lt;br /&gt;
&lt;code&gt;vagrant snapshot go &amp;quot;Name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除一个快照&lt;br /&gt;
&lt;code&gt;vagrant snapshot delete &amp;quot;Name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;一些参考资料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://segmentfault.com/a/1190000000264347&#34;&gt;使用 Vagrant 打造跨平台开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.williamsang.com/archives/2401.html&#34;&gt;Vagrant 三种网络配置详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant常用命令</title>
      <link>http://wixb50.gitcafe.io/2015/11/03/vagrant%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 03 Nov 2015 11:45:55 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/03/vagrant%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>

&lt;h2 id=&#34;vagrant常用命令&#34;&gt;Vagrant常用命令&lt;/h2&gt;

&lt;p&gt;前面讲了Vagrant的几个命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vagrant box add&lt;/code&gt; 添加box的操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant init&lt;/code&gt; 初始化box的操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt; 启动虚拟机的操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant ssh&lt;/code&gt; 登录拟机的操作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vagrant还包括如下一些操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant box list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;显示当前已经添加的box列表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box list
base (virtualbox)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant box remove&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;删除相应的box&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box remove base virtualbox
Removing box &#39;base&#39; with provider &#39;virtualbox&#39;...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant destroy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;停止当前正在运行的虚拟机并销毁所有创建的资源&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant destroy
Are you sure you want to destroy the &#39;default&#39; VM? [y/N] y
[default] Destroying VM and associated drives...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant halt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;关机&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant halt
[default] Attempting graceful shutdown of VM...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant package&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打包命令，可以把当前的运行的虚拟机环境进行打包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant package
[default] Attempting graceful shutdown of VM...
[default] Clearing any previously set forwarded ports...
[default] Creating temporary directory for export...
[default] Exporting VM...
[default] Compressing package to: /Users/astaxie/vagrant/package.box
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用于安装卸载插件&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant provision&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通常情况下Box只做最基本的设置，而不是设置好所有的环境，因此Vagrant通常使用Chef或者Puppet来做进一步的环境搭建。那么Chef或者Puppet称为provisioning，而该命令就是指定开启相应的provisioning。按照Vagrant作者的说法，所谓的provisioning就是&amp;raquo;The problem of installing software on a booted system&amp;raquo;的意思。除了Chef和Puppet这些主流的配置管理工具之外，我们还可以使用Shell来编写安装脚本。&lt;/p&gt;

&lt;p&gt;例如： &lt;code&gt;vagrant provision --provision-with chef&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant reload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重新启动虚拟机，主要用于重新载入配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant reload
[default] Attempting graceful shutdown of VM...
[default] Setting the name of the VM...
[default] Clearing any previously set forwarded ports...
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 22 =&amp;gt; 2222 (adapter 1)
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Setting hostname...
[default] Mounting shared folders...
[default] -- /vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant resume&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;恢复前面被挂起的状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$vagrant resume
[default] Resuming suspended VM...
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant ssh-config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输出用于ssh连接的一些信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile &amp;quot;/Users/astaxie/.vagrant.d/insecure_private_key&amp;quot;
  IdentitiesOnly yes
  LogLevel FATAL
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;获取当前虚拟机的状态&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$vagrant status
Current machine states:


default                   running (virtualbox)


The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vagrant suspend&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;挂起当前的虚拟机&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant suspend
[default] Saving VM state and suspending execution...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;模拟打造多机器的分布式系统&#34;&gt;模拟打造多机器的分布式系统&lt;/h2&gt;

&lt;p&gt;前面这些单主机单虚拟机主要是用来自己做开发机，从这部分开始的内容主要将向大家介绍如何在单机上通过虚拟机来打造分布式造集群系统。这种多机器模式特别适合以下几种人：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;快速建立产品网络的多机器环境，例如web服务器、db服务器&lt;/li&gt;
&lt;li&gt;建立一个分布式系统，学习他们是如何交互的&lt;/li&gt;
&lt;li&gt;测试API和其他组件的通信&lt;/li&gt;
&lt;li&gt;容灾模拟，网络断网、机器死机、连接超时等情况&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vagrant支持单机模拟多台机器，而且支持一个配置文件Vagrntfile就可以跑分布式系统。&lt;/p&gt;

&lt;p&gt;现在我们来建立多台VM跑起來，並且让他们之间能够相通信，假设一台是应用服务器、一台是DB服务器，那么这个结构在Vagrant中非常简单，其实和单台的配置差不多，你只需要通过&lt;code&gt;config.vm.define&lt;/code&gt;来定义不同的角色就可以了，现在我们打开配置文件进行如下设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.define :web do |web|
    web.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
          v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--name&amp;quot;, &amp;quot;web&amp;quot;, &amp;quot;--memory&amp;quot;, &amp;quot;512&amp;quot;]
    end
    web.vm.box = &amp;quot;base&amp;quot;
    web.vm.hostname = &amp;quot;web&amp;quot;
    web.vm.network :private_network, ip: &amp;quot;11.11.1.1&amp;quot;
  end

  config.vm.define :db do |db|
    db.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
          v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--name&amp;quot;, &amp;quot;db&amp;quot;, &amp;quot;--memory&amp;quot;, &amp;quot;512&amp;quot;]
    end
    db.vm.box = &amp;quot;base&amp;quot;
    db.vm.hostname = &amp;quot;db&amp;quot;
    db.vm.network :private_network, ip: &amp;quot;11.11.1.2&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的设置和前面我们单机设置配置类似，只是我们使用了&lt;code&gt;:web&lt;/code&gt;以及&lt;code&gt;:db&lt;/code&gt;分別做了两个VM的设置，并且给每个VM设置了不同的&lt;code&gt;hostname&lt;/code&gt;和IP，设置好之后再使用&lt;code&gt;vagrant up&lt;/code&gt;将虚拟机跑起来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
Bringing machine &#39;web&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;db&#39; up with &#39;virtualbox&#39; provider...
[web] Setting the name of the VM...
[web] Clearing any previously set forwarded ports...
[web] Creating shared folders metadata...
[web] Clearing any previously set network interfaces...
[web] Preparing network interfaces based on configuration...
[web] Forwarding ports...
[web] -- 22 =&amp;gt; 2222 (adapter 1)
[web] Running any VM customizations...
[web] Booting VM...
[web] Waiting for VM to boot. This can take a few minutes.
[web] VM booted and ready for use!
[web] Setting hostname...
[web] Configuring and enabling network interfaces...
[web] Mounting shared folders...
[web] -- /vagrant
[db] Setting the name of the VM...
[db] Clearing any previously set forwarded ports...
[db] Fixed port collision for 22 =&amp;gt; 2222. Now on port 2200.
[db] Creating shared folders metadata...
[db] Clearing any previously set network interfaces...
[db] Preparing network interfaces based on configuration...
[db] Forwarding ports...
[db] -- 22 =&amp;gt; 2200 (adapter 1)
[db] Running any VM customizations...
[db] Booting VM...
[db] Waiting for VM to boot. This can take a few minutes.
[db] VM booted and ready for use!
[db] Setting hostname...
[db] Configuring and enabling network interfaces...
[db] Mounting shared folders...
[db] -- /vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到上面的信息输出后，我们就可以通过&lt;code&gt;vagrant ssh&lt;/code&gt;登录虚拟机了，但是这次和上次使用的不一样了，这次我们需要指定相应的角色，用来告诉ssh你期望连接的是哪一台：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh web
vagrant@web:~$

$ vagrant ssh db
vagrant@db:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是很酷！现在接下来我们再来验证一下虚拟机之间的通信，让我们先使用ssh登录web虚拟机，然后在web虚拟机上使用ssh登录db虚拟机(默认密码是&lt;code&gt;vagrant&lt;/code&gt;)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh web
Linux web 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux
Ubuntu 10.04.4 LTS

Welcome to the Ubuntu Server!
 * Documentation:  http://www.ubuntu.com/server/doc
New release &#39;precise&#39; available.
Run &#39;do-release-upgrade&#39; to upgrade to it.

Welcome to your Vagrant-built virtual machine.
Last login: Thu Aug  8 18:55:44 2013 from 10.0.2.2
vagrant@web:~$ ssh 11.11.1.2
The authenticity of host &#39;11.11.1.2 (11.11.1.2)&#39; can&#39;t be established.
RSA key fingerprint is e7:8f:07:57:69:08:6e:fa:82:bc:1c:f6:53:3f:12:9e.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;11.11.1.2&#39; (RSA) to the list of known hosts.
vagrant@11.11.1.2&#39;s password:
Linux db 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux
Ubuntu 10.04.4 LTS

Welcome to the Ubuntu Server!
 * Documentation:  http://www.ubuntu.com/server/doc
New release &#39;precise&#39; available.
Run &#39;do-release-upgrade&#39; to upgrade to it.

Welcome to your Vagrant-built virtual machine.
Last login: Thu Aug  8 18:58:50 2013 from 10.0.2.2
vagrant@db:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的信息我们可以看到虚拟机之间通信是畅通的，所以现在开始你伟大的架构设计吧，你想设计怎么样的架构都可以，唯一限制你的就是你主机的硬件配置了。&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;preface.md&#34;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上一节: &lt;a href=&#34;01.2.md&#34;&gt;Vagrant安装配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下一节: &lt;a href=&#34;01.4.md&#34;&gt;Go环境安装配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>sublime插件集合</title>
      <link>http://wixb50.gitcafe.io/2015/11/03/sublime%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 03 Nov 2015 11:21:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/03/sublime%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/</guid>
      <description>

&lt;h2 id=&#34;sublime编辑器插件&#34;&gt;sublime编辑器插件&lt;/h2&gt;

&lt;p&gt;1.HTML代码格式化插件&lt;code&gt;Tag&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;2.右键菜单增强插件&lt;code&gt;SideBarEnhancements&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;3.JS代码格式化插件&lt;code&gt;JSformat&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;4.Json格式化插件&lt;code&gt;Pretty Json&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;5.Go语言sublime编辑器&lt;code&gt;Gosublime&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;6.markdown编辑和预览器：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MarkDown Edting&lt;/code&gt;,markdown编辑插件;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;omniMarkupPreview&lt;/code&gt;,浏览器markdown预览导出.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>docker安装与配置</title>
      <link>http://wixb50.gitcafe.io/2015/11/02/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 02 Nov 2015 21:38:38 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/02/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;h3 id=&#34;安装命令-运行即可&#34;&gt;安装命令，运行即可&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install apt-transport-https
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
sudo bash -c &amp;quot;echo deb https://get.docker.io/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
sudo apt-get update
sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;完&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>welcome</title>
      <link>http://wixb50.gitcafe.io/2015/10/31/welcome/</link>
      <pubDate>Sat, 31 Oct 2015 16:14:34 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/10/31/welcome/</guid>
      <description>

&lt;h2 id=&#34;stay-hungury-stay-foolish&#34;&gt;Stay hungury,Stay foolish.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tonybai.com/2015/09/23/intro-of-gohugo/&#34;&gt;使用Hugo搭建静态站点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Wixb blog</title>
    <link>http://wixb50.gitcafe.io/categories/git/</link>
    <description>Recent content in Git on Wixb blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wixb50@gmail.com (Wixb)</managingEditor>
    <webMaster>wixb50@gmail.com (Wixb)</webMaster>
    <copyright>(c) 2015 wixb.All rights reserved.</copyright>
    <lastBuildDate>Thu, 05 Nov 2015 13:26:17 +0800</lastBuildDate>
    <atom:link href="http://wixb50.gitcafe.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jenkins教程-简单ssh构建</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/jenkins%E6%95%99%E7%A8%8B-%E7%AE%80%E5%8D%95ssh%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Thu, 05 Nov 2015 13:26:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/jenkins%E6%95%99%E7%A8%8B-%E7%AE%80%E5%8D%95ssh%E6%9E%84%E5%BB%BA/</guid>
      <description>

&lt;h1 id=&#34;jenkins教程之-简单远程执行ssh构建&#34;&gt;Jenkins教程之——简单远程执行ssh构建&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Jenkins CI is the leading open-source continuous integration server.&lt;/p&gt;

&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;此教程中jenkins只充当于一个中间件的作用，并且所有的构建和部署都在&lt;strong&gt;远端服务器&lt;/strong&gt;完成。&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;jenkins安装&#34;&gt;jenkins安装&lt;/h3&gt;

&lt;p&gt;这个自行google去，教程很简单，只要把war包下载执行即可，本文是基于dokcer的jenkins镜像安装的。&lt;/p&gt;

&lt;h3 id=&#34;gitlab安装&#34;&gt;gitlab安装&lt;/h3&gt;

&lt;p&gt;见&lt;a href=&#34;https://gitlab.com/&#34;&gt;gitlab官网&lt;/a&gt;，或者可以直接使用gitlab托管源码。&lt;/p&gt;

&lt;h2 id=&#34;jenkins配置&#34;&gt;jenkins配置&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;1.配置安全设置：&lt;code&gt;系统管理-&amp;gt;Configure Global Security&lt;/code&gt;中启用安全，然后根据自己需要，可配置用户权限等。&lt;/p&gt;

&lt;p&gt;2.插件安装：&lt;code&gt;系统管理-&amp;gt;管理插件&lt;/code&gt;中安装可选插件，本教程中需要的插件有：GIT client plugin、GIT plugin、Gitlab Hook Plugin、&lt;strong&gt;Publish Over SSH&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;3.新建一个&lt;code&gt;构建一个自由风格的软件项目&lt;/code&gt;，输入名称(不要带大写)。&lt;/p&gt;

&lt;p&gt;4.然后在&lt;code&gt;源码管理&lt;/code&gt;地方选择&lt;code&gt;Git&lt;/code&gt;输入&lt;code&gt;Repository URL&lt;/code&gt;，以及配置好&lt;code&gt;Credentials&lt;/code&gt;(可选择username或者ssh配置)，完成后选择要构建的分支&lt;code&gt;e.g.,*/develop&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;构建触发器&lt;/strong&gt;选择&lt;code&gt;触发远程构建&lt;/code&gt;，并根据提示填好身份令牌，&lt;strong&gt;并且在&lt;/strong&gt;你的&lt;code&gt;gitlab项目&lt;/code&gt;中设置好&lt;code&gt;web hook(e.g.,JENKINS_URL/job/zeu_frontend/build?token=TOKEN_NAME)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;构建&lt;/strong&gt;&lt;code&gt;增加构建步骤&lt;/code&gt;选择&lt;code&gt;send files or execute commands over ssh&lt;/code&gt;，然后配置好组要在远端执行脚本的ssh server测试能连接上，然后在&lt;code&gt;Exec command&lt;/code&gt;中输入脚本，或者&lt;code&gt;Transfer Set Source files&lt;/code&gt;可以执行jenkins中的脚本在远端执行，这里简单起见，就直接输入命令。&lt;/p&gt;

&lt;p&gt;7.这样就差不多了，还有想加的步骤，自己加把，提交一下，是不是自己开始构建了呢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;输入的脚本要自己在远端跑一下，能完整跑通才行，注意为远程服务器git配置号user和name，以及sshKey，这样就不要输入密码pull了。&lt;/p&gt;

&lt;h2 id=&#34;auth&#34;&gt;Auth&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Support by &lt;a href=&#34;http://elegencetse.com&#34;&gt;elegancetse&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitlab搭建教程</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/gitlab%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 05 Nov 2015 13:26:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/gitlab%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</guid>
      <description>

&lt;h2 id=&#34;gitlab搭建教程&#34;&gt;gitlab搭建教程&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;测试搭建环境:ubuntu14.04/trustry&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;参考教程&lt;br /&gt;
&amp;gt; 1.&lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;官方教程&lt;/a&gt;&lt;br /&gt;
&amp;gt; 2.&lt;a href=&#34;http://www.cnblogs.com/restran/p/4063880.html&#34;&gt;在自己的服务器上部署 GitLab 社区版&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git常用命令集合</title>
      <link>http://wixb50.gitcafe.io/2015/11/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 05 Nov 2015 13:25:17 +0800</pubDate>
      <author>wixb50@gmail.com (Wixb)</author>
      <guid>http://wixb50.gitcafe.io/2015/11/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</guid>
      <description>&lt;pre&gt;&lt;code&gt;git init                                                  # 初始化本地git仓库（创建新仓库）
git config --global user.name &amp;quot;xxx&amp;quot;                       # 配置用户名
git config --global user.email &amp;quot;xxx@xxx.com&amp;quot;              # 配置邮件
git config --global color.ui true                         # git status等命令自动着色
git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
git config --global --unset http.proxy                    # remove  proxy configuration on git
git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库
git status                                                # 查看当前版本状态（是否修改）
git add xyz                                               # 添加xyz文件至index
git add .                                                 # 增加当前子目录下所有更改过的文件至index
git commit -m &#39;xxx&#39;                                       # 提交
git commit --amend -m &#39;xxx&#39;                               # 合并上一次提交（用于反复修改）
git commit -am &#39;xxx&#39;                                      # 将add和commit合为一步
git rm xxx                                                # 删除index中的文件
git rm -r *                                               # 递归删除
git log                                                   # 显示提交日志
git log -1                                                # 显示1行日志 -n为n行
git log -5
git log --stat                                            # 显示提交日志及相关变动文件
git log -p -m
git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容
git show dfb02                                            # 可只用commitid的前几位
git show HEAD                                             # 显示HEAD提交日志
git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
git tag                                                   # 显示已存在的tag
git tag -a v2.0 -m &#39;xxx&#39;                                  # 增加v2.0的tag
git show v2.0                                             # 显示v2.0的日志及详细内容
git log v2.0                                              # 显示v2.0的日志
git diff                                                  # 显示所有未添加至index的变更
git diff --cached                                         # 显示所有已添加index但还未commit的变更
git diff HEAD^                                            # 比较与上一个版本的差异
git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异
git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的
git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容
git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）
git branch                                                # 显示本地分支
git branch --contains 50089                               # 显示包含提交50089的分支
git branch -a                                             # 显示所有分支
git branch -r                                             # 显示所有原创分支
git branch --merged                                       # 显示所有已合并到当前分支的分支
git branch --no-merged                                    # 显示所有未合并到当前分支的分支
git branch -m master master_copy                          # 本地分支改名
git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出
git checkout -b master master_copy                        # 上面的完整版
git checkout features/performance                         # 检出已存在的features/performance分支
git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支
git checkout v2.0                                         # 检出版本v2.0
git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出
git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）
git merge origin/master                                   # 合并远程master分支至当前分支
git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改
git push origin master                                    # 将当前分支push到远程master分支
git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支
git push --tags                                           # 把所有tag推送到远程仓库
git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）
git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支
git pull origin master                                    # 获取远程分支master并merge到当前分支
git mv README README2                                     # 重命名文件README为README2
git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）
git rebase
git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）
git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933
git ls-files                                              # 列出git index包含的文件
git show-branch                                           # 图示当前分支历史
git show-branch --all                                     # 图示所有分支历史
git whatchanged                                           # 显示提交历史对应的文件修改
git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
git ls-tree HEAD                                          # 内部命令：显示某个git对象
git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH
git reflog                                                # 显示所有提交，包括孤立节点
git show HEAD@{5}
git show master@{yesterday}                               # 显示master分支昨天的状态
git log --pretty=format:&#39;%h %s&#39; --graph                   # 图示提交日志
git show HEAD~3
git show -s --pretty=raw 2be7fcb476
git stash                                                 # 暂存当前修改，将所有至为HEAD状态
git stash list                                            # 查看所有暂存
git stash show -p stash@{0}                               # 参考第一次暂存
git stash apply stash@{0}                                 # 应用第一次暂存
git grep &amp;quot;delete from&amp;quot;                                    # 文件中搜索文本“delete from”
git grep -e &#39;#define&#39; --and -e SORT_DIRENT
git gc
git fsck
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>